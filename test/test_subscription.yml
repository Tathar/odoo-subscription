- |
  In Order to test the Subscription in OpenERP, which allows us to manage all operations for managing subscriptions.
- |
  I'm creating "Gold Subscription" which has Subscription fee 80 EURO and It's started from 1st June to 31st Dec.
-
  !record {model: product.product, id: product_product_subscriptionproduct0}:
    categ_id: product.product_category_1
    subscription: 1
    subscription_date_from: !eval datetime.today().strftime("%Y-%m-%d")
    subscription_date_to: !eval "(datetime.now() + timedelta(6*31)).strftime('%Y-%m-%d')" 
    name: Gold Subscription
    type: service
    list_price: 80.00

- |
  "Seagate" want to join "Gold Subscription", so I'm checking  "Current Subscription State" of "Seagate". It is an "Non Member" or not.
-
  !assert {model: res.partner, id: base.res_partner_19}:
      - subscription_state == 'none', 'Member should be has "Current Subscription State" in "Non Member".'
- |
  I'm doing to make subscription invoice for "Seagate" on joining "Gold Subscription".
-
  !python {model: res.partner}: |
    self.create_subscription_invoice(cr, uid, [ref("base.res_partner_19")], product_id=ref("product_product_subscriptionproduct0"), datas={"amount":80.00})
- |
  I'm checking  "Current Subscription State" of "Seagate". It is an "Waiting Member" or not.
-
  !assert {model: res.partner, id: base.res_partner_19}:
      - subscription_state == 'waiting', 'Member should be has "Current Subscription State" in "Waiting Member".'
- |
  I'm Opening that Invoice which is created for "Seagate".
-
  !python {model: res.partner}: |
        invoice_pool = self.pool.get('account.invoice')
        partner_pool = self.pool.get('res.partner')
        subscription_line_pool = self.pool.get('subscription.subscription_line')
        subscription_pool = self.pool.get('product.product')

        subscription_line_ids = subscription_line_pool.search(cr, uid, [('subscription_id','=',ref('product_product_subscriptionproduct0')),('partner','=',ref('base.res_partner_19'))])
        subscription_lines = subscription_line_pool.browse(cr, uid, subscription_line_ids)
        assert subscription_lines, 'Subscription is not registrated.'
        subscription_line = subscription_lines[0]
        subscription_line.account_invoice_id.signal_workflow('invoice_open')

- |
  I'm checking "Current subscription state" of "Seagate". It is an "Invoiced Member" or not.
-
  !assert {model: res.partner, id: base.res_partner_19}:
     - subscription_state == 'invoiced', 'Member should be has "Current Subscription State" in "Invoiced Member".'

- |
  I'm creating free member "Ms. Johnson" of "Gold Subscription".
-
  !record {model: res.partner, id: res_partner_msjohnson0}:
        name: Ms. Johnson
        city: paris
        country_id: base.fr
        name: Ms. Johnson
        street: 1 rue Rockfeller
        type: invoice
        zip: '75016'
        free_member: True

- |
  I'm checking "Current subscription state" of "Ms. Johnson". It is an "Free Member" or not.
-
  !assert {model: res.partner, id: res_partner_msjohnson0}:
     - subscription_state == 'free', 'Member should be has "Current Subscription State" in "Free Member".'

- |
  I'm set "Seagate" as a associated member of "Ms. Johnson" and also set Non free member.
-
  !python {model: res.partner}: |
    self.write(cr, uid, [ref("res_partner_msjohnson0")], {'free_member': False, 'associate_member': ref("base.res_partner_19")})

- |
  I'm checking "Current subscription state" of "Ms. Johnson". It is an "Paid Member" or not.
-
  !assert {model: res.partner, id: res_partner_msjohnson0}:
     - subscription_state == 'paid', 'Member should be has "Current Subscription State" in "Paid Member".'

- |
  I'm creating new "Regular Subscription" which has Subscription fee 50 EURO and It's started from 1st June to 31st Dec.
-
  !record {model: product.product, id: product_product_subscriptionproduct1}:
    categ_id: product.product_category_1
    subscription: 1
    subscription_date_from: !eval datetime.today().strftime("%Y-%m-%d")
    subscription_date_to: !eval "(datetime.now() + timedelta(6*31)).strftime('%Y-%m-%d')" 
    name: Regular Subscription
    type: service
    list_price: 50.00
- |
  I'm making invoice of "Seagate" member on joining new subscription "Regular Subscription".
-
  !python {model: res.partner}: |
    self.create_subscription_invoice(cr, uid, [ref("base.res_partner_19")], product_id=ref("product_product_subscriptionproduct1"), datas={"amount":50.00})
- |
  I'm checking "Current subscription state" of "Seagate". It is an "Old Member" or not.
-
  !assert {model: res.partner, id: base.res_partner_19}:
      - subscription_state == 'old', 'Member should be has "Current Subscription State" in "Old Member".'
- |
  I'm doing to make credit note of invoice which is paid by "Seagate" to cancel subscription.
-
  !python {model: account.invoice}: |
        invoice_pool = self.pool.get('account.invoice')
        partner_pool = self.pool.get('res.partner')
        subscription_line_pool = self.pool.get('subscription.subscription_line')
        subscription_pool = self.pool.get('product.product')
        invoice_refund_pool = self.pool.get('account.invoice.refund')

        subscription_line_ids = subscription_line_pool.search(cr, uid, [('subscription_id','=',ref('product_product_subscriptionproduct0')),('partner','=',ref('base.res_partner_19'))])
        subscription_lines = subscription_line_pool.browse(cr, uid, subscription_line_ids)
        assert subscription_lines, 'Subscription is not registrated.'
        subscription_line = subscription_lines[0]
        refund_id = invoice_refund_pool.create(cr, uid, {'description': 'Refund of Subscription', 'filter_refund': 'refund'}, {'active_id': subscription_line.account_invoice_id.id})
        invoice_refund_pool.invoice_refund(cr, uid, [refund_id], {'active_id': subscription_line.account_invoice_id.id, 'active_ids': [subscription_line.account_invoice_id.id]})
- |
  I'm checking "Current subscription state" of "Seagate". It is an "Cancelled Member" or not.
-
  !assert {model: res.partner, id: base.res_partner_19}:
      - subscription_state == 'canceled', 'Member should be has "Current Subscription State" in "Cancelled Member".'

